{"ast":null,"code":"import defaultParams from './params.js';\nimport { capitalizeFirstLetter, warn } from './utils.js';\nconst swalStringParams = ['swal-title', 'swal-html', 'swal-footer'];\n/**\n * @param {SweetAlertOptions} params\n * @returns {SweetAlertOptions}\n */\n\nexport const getTemplateParams = params => {\n  /** @type {HTMLTemplateElement} */\n  const template = typeof params.template === 'string' ? document.querySelector(params.template) : params.template;\n\n  if (!template) {\n    return {};\n  }\n  /** @type {DocumentFragment} */\n\n\n  const templateContent = template.content;\n  showWarningsForElements(templateContent);\n  const result = Object.assign(getSwalParams(templateContent), getSwalFunctionParams(templateContent), getSwalButtons(templateContent), getSwalImage(templateContent), getSwalIcon(templateContent), getSwalInput(templateContent), getSwalStringParams(templateContent, swalStringParams));\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\n\nconst getSwalParams = templateContent => {\n  const result = {};\n  /** @type {HTMLElement[]} */\n\n  const swalParams = Array.from(templateContent.querySelectorAll('swal-param'));\n  swalParams.forEach(param => {\n    showWarningsForAttributes(param, ['name', 'value']);\n    const paramName = param.getAttribute('name');\n    const value = param.getAttribute('value');\n\n    if (typeof defaultParams[paramName] === 'boolean') {\n      result[paramName] = value !== 'false';\n    } else if (typeof defaultParams[paramName] === 'object') {\n      result[paramName] = JSON.parse(value);\n    } else {\n      result[paramName] = value;\n    }\n  });\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\n\n\nconst getSwalFunctionParams = templateContent => {\n  const result = {};\n  /** @type {HTMLElement[]} */\n\n  const swalFunctions = Array.from(templateContent.querySelectorAll('swal-function-param'));\n  swalFunctions.forEach(param => {\n    const paramName = param.getAttribute('name');\n    const value = param.getAttribute('value');\n    result[paramName] = new Function(`return ${value}`)();\n  });\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\n\n\nconst getSwalButtons = templateContent => {\n  const result = {};\n  /** @type {HTMLElement[]} */\n\n  const swalButtons = Array.from(templateContent.querySelectorAll('swal-button'));\n  swalButtons.forEach(button => {\n    showWarningsForAttributes(button, ['type', 'color', 'aria-label']);\n    const type = button.getAttribute('type');\n    result[`${type}ButtonText`] = button.innerHTML;\n    result[`show${capitalizeFirstLetter(type)}Button`] = true;\n\n    if (button.hasAttribute('color')) {\n      result[`${type}ButtonColor`] = button.getAttribute('color');\n    }\n\n    if (button.hasAttribute('aria-label')) {\n      result[`${type}ButtonAriaLabel`] = button.getAttribute('aria-label');\n    }\n  });\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\n\n\nconst getSwalImage = templateContent => {\n  const result = {};\n  /** @type {HTMLElement} */\n\n  const image = templateContent.querySelector('swal-image');\n\n  if (image) {\n    showWarningsForAttributes(image, ['src', 'width', 'height', 'alt']);\n\n    if (image.hasAttribute('src')) {\n      result.imageUrl = image.getAttribute('src');\n    }\n\n    if (image.hasAttribute('width')) {\n      result.imageWidth = image.getAttribute('width');\n    }\n\n    if (image.hasAttribute('height')) {\n      result.imageHeight = image.getAttribute('height');\n    }\n\n    if (image.hasAttribute('alt')) {\n      result.imageAlt = image.getAttribute('alt');\n    }\n  }\n\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\n\n\nconst getSwalIcon = templateContent => {\n  const result = {};\n  /** @type {HTMLElement} */\n\n  const icon = templateContent.querySelector('swal-icon');\n\n  if (icon) {\n    showWarningsForAttributes(icon, ['type', 'color']);\n\n    if (icon.hasAttribute('type')) {\n      /** @type {SweetAlertIcon} */\n      // @ts-ignore\n      result.icon = icon.getAttribute('type');\n    }\n\n    if (icon.hasAttribute('color')) {\n      result.iconColor = icon.getAttribute('color');\n    }\n\n    result.iconHtml = icon.innerHTML;\n  }\n\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\n\n\nconst getSwalInput = templateContent => {\n  const result = {};\n  /** @type {HTMLElement} */\n\n  const input = templateContent.querySelector('swal-input');\n\n  if (input) {\n    showWarningsForAttributes(input, ['type', 'label', 'placeholder', 'value']);\n    /** @type {SweetAlertInput} */\n    // @ts-ignore\n\n    result.input = input.getAttribute('type') || 'text';\n\n    if (input.hasAttribute('label')) {\n      result.inputLabel = input.getAttribute('label');\n    }\n\n    if (input.hasAttribute('placeholder')) {\n      result.inputPlaceholder = input.getAttribute('placeholder');\n    }\n\n    if (input.hasAttribute('value')) {\n      result.inputValue = input.getAttribute('value');\n    }\n  }\n  /** @type {HTMLElement[]} */\n\n\n  const inputOptions = Array.from(templateContent.querySelectorAll('swal-input-option'));\n\n  if (inputOptions.length) {\n    result.inputOptions = {};\n    inputOptions.forEach(option => {\n      showWarningsForAttributes(option, ['value']);\n      const optionValue = option.getAttribute('value');\n      const optionName = option.innerHTML;\n      result.inputOptions[optionValue] = optionName;\n    });\n  }\n\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n * @param {string[]} paramNames\n * @returns {SweetAlertOptions}\n */\n\n\nconst getSwalStringParams = (templateContent, paramNames) => {\n  const result = {};\n\n  for (const i in paramNames) {\n    const paramName = paramNames[i];\n    /** @type {HTMLElement} */\n\n    const tag = templateContent.querySelector(paramName);\n\n    if (tag) {\n      showWarningsForAttributes(tag, []);\n      result[paramName.replace(/^swal-/, '')] = tag.innerHTML.trim();\n    }\n  }\n\n  return result;\n};\n/**\n * @param {DocumentFragment} templateContent\n */\n\n\nconst showWarningsForElements = templateContent => {\n  const allowedElements = swalStringParams.concat(['swal-param', 'swal-function-param', 'swal-button', 'swal-image', 'swal-icon', 'swal-input', 'swal-input-option']);\n  Array.from(templateContent.children).forEach(el => {\n    const tagName = el.tagName.toLowerCase();\n\n    if (!allowedElements.includes(tagName)) {\n      warn(`Unrecognized element <${tagName}>`);\n    }\n  });\n};\n/**\n * @param {HTMLElement} el\n * @param {string[]} allowedAttributes\n */\n\n\nconst showWarningsForAttributes = (el, allowedAttributes) => {\n  Array.from(el.attributes).forEach(attribute => {\n    if (allowedAttributes.indexOf(attribute.name) === -1) {\n      warn([`Unrecognized attribute \"${attribute.name}\" on <${el.tagName.toLowerCase()}>.`, `${allowedAttributes.length ? `Allowed attributes are: ${allowedAttributes.join(', ')}` : 'To set the value, use HTML within the element.'}`]);\n    }\n  });\n};","map":{"version":3,"names":["defaultParams","capitalizeFirstLetter","warn","swalStringParams","getTemplateParams","params","template","document","querySelector","templateContent","content","showWarningsForElements","result","Object","assign","getSwalParams","getSwalFunctionParams","getSwalButtons","getSwalImage","getSwalIcon","getSwalInput","getSwalStringParams","swalParams","Array","from","querySelectorAll","forEach","param","showWarningsForAttributes","paramName","getAttribute","value","JSON","parse","swalFunctions","Function","swalButtons","button","type","innerHTML","hasAttribute","image","imageUrl","imageWidth","imageHeight","imageAlt","icon","iconColor","iconHtml","input","inputLabel","inputPlaceholder","inputValue","inputOptions","length","option","optionValue","optionName","paramNames","i","tag","replace","trim","allowedElements","concat","children","el","tagName","toLowerCase","includes","allowedAttributes","attributes","attribute","indexOf","name","join"],"sources":["/home/karrey/Documents/project/photofolio/photo-folio-fronted/node_modules/sweetalert2/src/utils/getTemplateParams.js"],"sourcesContent":["import defaultParams from './params.js'\nimport { capitalizeFirstLetter, warn } from './utils.js'\n\nconst swalStringParams = ['swal-title', 'swal-html', 'swal-footer']\n\n/**\n * @param {SweetAlertOptions} params\n * @returns {SweetAlertOptions}\n */\nexport const getTemplateParams = (params) => {\n  /** @type {HTMLTemplateElement} */\n  const template = typeof params.template === 'string' ? document.querySelector(params.template) : params.template\n  if (!template) {\n    return {}\n  }\n  /** @type {DocumentFragment} */\n  const templateContent = template.content\n\n  showWarningsForElements(templateContent)\n\n  const result = Object.assign(\n    getSwalParams(templateContent),\n    getSwalFunctionParams(templateContent),\n    getSwalButtons(templateContent),\n    getSwalImage(templateContent),\n    getSwalIcon(templateContent),\n    getSwalInput(templateContent),\n    getSwalStringParams(templateContent, swalStringParams)\n  )\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalParams = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement[]} */\n  const swalParams = Array.from(templateContent.querySelectorAll('swal-param'))\n  swalParams.forEach((param) => {\n    showWarningsForAttributes(param, ['name', 'value'])\n    const paramName = param.getAttribute('name')\n    const value = param.getAttribute('value')\n    if (typeof defaultParams[paramName] === 'boolean') {\n      result[paramName] = value !== 'false'\n    } else if (typeof defaultParams[paramName] === 'object') {\n      result[paramName] = JSON.parse(value)\n    } else {\n      result[paramName] = value\n    }\n  })\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalFunctionParams = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement[]} */\n  const swalFunctions = Array.from(templateContent.querySelectorAll('swal-function-param'))\n  swalFunctions.forEach((param) => {\n    const paramName = param.getAttribute('name')\n    const value = param.getAttribute('value')\n    result[paramName] = new Function(`return ${value}`)()\n  })\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalButtons = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement[]} */\n  const swalButtons = Array.from(templateContent.querySelectorAll('swal-button'))\n  swalButtons.forEach((button) => {\n    showWarningsForAttributes(button, ['type', 'color', 'aria-label'])\n    const type = button.getAttribute('type')\n    result[`${type}ButtonText`] = button.innerHTML\n    result[`show${capitalizeFirstLetter(type)}Button`] = true\n    if (button.hasAttribute('color')) {\n      result[`${type}ButtonColor`] = button.getAttribute('color')\n    }\n    if (button.hasAttribute('aria-label')) {\n      result[`${type}ButtonAriaLabel`] = button.getAttribute('aria-label')\n    }\n  })\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalImage = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement} */\n  const image = templateContent.querySelector('swal-image')\n  if (image) {\n    showWarningsForAttributes(image, ['src', 'width', 'height', 'alt'])\n    if (image.hasAttribute('src')) {\n      result.imageUrl = image.getAttribute('src')\n    }\n    if (image.hasAttribute('width')) {\n      result.imageWidth = image.getAttribute('width')\n    }\n    if (image.hasAttribute('height')) {\n      result.imageHeight = image.getAttribute('height')\n    }\n    if (image.hasAttribute('alt')) {\n      result.imageAlt = image.getAttribute('alt')\n    }\n  }\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalIcon = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement} */\n  const icon = templateContent.querySelector('swal-icon')\n  if (icon) {\n    showWarningsForAttributes(icon, ['type', 'color'])\n    if (icon.hasAttribute('type')) {\n      /** @type {SweetAlertIcon} */\n      // @ts-ignore\n      result.icon = icon.getAttribute('type')\n    }\n    if (icon.hasAttribute('color')) {\n      result.iconColor = icon.getAttribute('color')\n    }\n    result.iconHtml = icon.innerHTML\n  }\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @returns {SweetAlertOptions}\n */\nconst getSwalInput = (templateContent) => {\n  const result = {}\n  /** @type {HTMLElement} */\n  const input = templateContent.querySelector('swal-input')\n  if (input) {\n    showWarningsForAttributes(input, ['type', 'label', 'placeholder', 'value'])\n    /** @type {SweetAlertInput} */\n    // @ts-ignore\n    result.input = input.getAttribute('type') || 'text'\n    if (input.hasAttribute('label')) {\n      result.inputLabel = input.getAttribute('label')\n    }\n    if (input.hasAttribute('placeholder')) {\n      result.inputPlaceholder = input.getAttribute('placeholder')\n    }\n    if (input.hasAttribute('value')) {\n      result.inputValue = input.getAttribute('value')\n    }\n  }\n  /** @type {HTMLElement[]} */\n  const inputOptions = Array.from(templateContent.querySelectorAll('swal-input-option'))\n  if (inputOptions.length) {\n    result.inputOptions = {}\n    inputOptions.forEach((option) => {\n      showWarningsForAttributes(option, ['value'])\n      const optionValue = option.getAttribute('value')\n      const optionName = option.innerHTML\n      result.inputOptions[optionValue] = optionName\n    })\n  }\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n * @param {string[]} paramNames\n * @returns {SweetAlertOptions}\n */\nconst getSwalStringParams = (templateContent, paramNames) => {\n  const result = {}\n  for (const i in paramNames) {\n    const paramName = paramNames[i]\n    /** @type {HTMLElement} */\n    const tag = templateContent.querySelector(paramName)\n    if (tag) {\n      showWarningsForAttributes(tag, [])\n      result[paramName.replace(/^swal-/, '')] = tag.innerHTML.trim()\n    }\n  }\n  return result\n}\n\n/**\n * @param {DocumentFragment} templateContent\n */\nconst showWarningsForElements = (templateContent) => {\n  const allowedElements = swalStringParams.concat([\n    'swal-param',\n    'swal-function-param',\n    'swal-button',\n    'swal-image',\n    'swal-icon',\n    'swal-input',\n    'swal-input-option',\n  ])\n  Array.from(templateContent.children).forEach((el) => {\n    const tagName = el.tagName.toLowerCase()\n    if (!allowedElements.includes(tagName)) {\n      warn(`Unrecognized element <${tagName}>`)\n    }\n  })\n}\n\n/**\n * @param {HTMLElement} el\n * @param {string[]} allowedAttributes\n */\nconst showWarningsForAttributes = (el, allowedAttributes) => {\n  Array.from(el.attributes).forEach((attribute) => {\n    if (allowedAttributes.indexOf(attribute.name) === -1) {\n      warn([\n        `Unrecognized attribute \"${attribute.name}\" on <${el.tagName.toLowerCase()}>.`,\n        `${\n          allowedAttributes.length\n            ? `Allowed attributes are: ${allowedAttributes.join(', ')}`\n            : 'To set the value, use HTML within the element.'\n        }`,\n      ])\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}